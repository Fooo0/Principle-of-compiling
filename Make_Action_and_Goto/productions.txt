<program>' => <program>;
<program> => <program_heading> semi <main_idtable> <program_block>;
<program_heading> => program ID;
<program_heading> => program ID ( <program_parameters> );
<program_parameters> => <identifier_list>;
<identifier_list> => <identifier_list> , ID;
<identifier_list> => ID;
<main_idtable> =>;
<program_block> => <block> .;
<block> => <constant_definitions> <variable_declarations> <procedure_function_declarations> <statement_part>;
<constant_definitions> =>;
<constant_definitions> => const <constant_definition_sequence> semi;
<constant_definition_sequence> => <constant_definition_sequence> semi <constant_definition>;
<constant_definition_sequence> => <constant_definition>;
<constant_definition> => ID = <constant>;
<constant> => INT;
<constant> => REAL;
<constant> => STRING;
<variable_declarations> =>;
<variable_declarations> => var <variable_declaration_sequence> semi;
<variable_declaration_sequence> => <variable_declaration_sequence> semi <variable_declaration>;
<variable_declaration_sequence> => <variable_declaration>;
<variable_declaration> => <identifier_list> : <type_denoter>;
<type_denoter> => ID;
<procedure_function_declarations> =>;
<procedure_function_declarations> => <procedure_function_declaration_sequence>;
<procedure_function_declaration_sequence> => <procedure_function_declaration>;
<procedure_function_declaration_sequence> => <procedure_function_declaration_sequence> <procedure_function_declaration>;
<procedure_function_declaration> => <function_declaration>;
<function_declaration> => <function_heading> semi <inner_idtable> <function_block>;
<function_heading> => function <function_identifier> : <type_identifier>;
<function_heading> => function <function_identifier> ( <formal_parameter_list> ) : <type_identifier>;
<type_identifier> => ID;
<formal_parameter_list> => <formal_parameter_section>;
<formal_parameter_list> => <formal_parameter_list> semi <formal_parameter_section>;
<formal_parameter_section> => <value_parameter_specification>;
<formal_parameter_section> => <variable_parameter_specification>;
<value_parameter_specification> => <identifier_list> : <type_identifier>;
<variable_parameter_specification> => var <identifier_list> : <type_identifier>;
<inner_idtable> =>;
<function_block> => <block> semi;
<statement_part> => <compound_statement>;
<compound_statement> => begin <statement_sequence> end;
<statement_sequence> => <statement> semi;
<procedure_function_declaration> => <procedure_declaration>;
<procedure_declaration> => <procedure_heading> semi <inner_idtable> <procedure_block>;
<procedure_block> => <block> semi;
<procedure_heading> => procedure <procedure_identifier>;
<procedure_heading> => procedure <procedure_identifier> ( <formal_parameter_list> );
<statement_sequence> => <statement_sequence> <bool_mark_M> <statement> semi;
<statement> => <simple_statement>;
<simple_statement> => <assignment_statement>;
<assignment_statement> => <variable_access> := <expression>;
<variable_access> => <variable_identifier>;
<variable_identifier> => ID;
<expression> => <simple_expression>;
<simple_expression> => <term>;
<simple_expression> => <sign> <term>;
<simple_expression> => <term> <simple_expression_sequence>;
<simple_expression> => <sign> <term> <simple_expression_sequence>;
<term> => <factor>;
<term> => <factor> <term_sequence>;
<factor> => <unsigned_constant>;
<unsigned_constant> => INT;
<unsigned_constant> => REAL;
<unsigned_constant> => STRING;
<unsigned_constant> => nil;
<term_sequence> => <multiplying_operator> <factor>;
<term_sequence> => <term_sequence> <multiplying_operator> <factor>;
<multiplying_operator> => *;
<multiplying_operator> => /;
<multiplying_operator> => div;
<multiplying_operator> => mod;
<sign> => +;
<sign> => -;
<simple_expression_sequence> => <adding_operator> <term>;
<simple_expression_sequence> => <simple_expression_sequence> <adding_operator> <term>;
<adding_operator> => +;
<adding_operator> => -;
<type_denoter> => <new_type>;
<new_type> => <new_structured_type>;
<new_structured_type> => <unpacked_structured_type>;
<unpacked_structured_type> => <array_type>;
<array_type> => array [ <index_type> <index_type_sequence> ] of <component_type>;
<index_type_sequence> =>;
<index_type_sequence> => <index_type_sequence> , <index_type>;
<index_type> => <ordinal_type>;
<ordinal_type> => <new_ordinal_type>;
<new_ordinal_type> => <subrange_type>;
<subrange_type> => <constant> .. <constant>;
<component_type> => <type_denoter>;
<variable_access> => <component_variable>;
<component_variable> => <indexed_variable>;
<indexed_variable> => <index_expression_sequence> ];
<index_expression_sequence> => <array_variable> [ <index_expression>;
<index_expression_sequence> => <index_expression_sequence> , <index_expression>;
<array_variable> => <variable_access>;
<index_expression> => <expression>;
<factor> => <variable_access>;
<factor> => ( <expression> );
<statement> => <structured_statement>;
<structured_statement> => <compound_statement>;
<structured_statement> => <conditional_statement>;
<conditional_statement> => <if_statement>;
<if_statement> => if <boolean_expression> then <bool_mark_M> <statement>;
<if_statement> => if <boolean_expression> then <bool_mark_M> <statement> <bool_mark_N> <else_part>;
<boolean_expression> => <boolean_term>;
<boolean_expression> => not <boolean_term>;
<boolean_expression> => <boolean_term> <boolean_expression_sequence>;
<boolean_expression> => not <boolean_term> <boolean_expression_sequence>;
<boolean_factor> => ( <boolean_expression> );
<boolean_term> => <boolean_factor>;
<boolean_term> => <boolean_factor> <boolean_term_sequence>;
<boolean_factor> => <expression> <relational_operator> <expression>;
<relational_operator> => =;
<relational_operator> => <>;
<relational_operator> => <;
<relational_operator> => >;
<relational_operator> => <=;
<relational_operator> => >=;
<relational_operator> => in;
<boolean_term_sequence> => and <bool_mark_M> <boolean_factor>;
<boolean_term_sequence> => <boolean_term_sequence> and <bool_mark_M> <boolean_factor>;
<boolean_expression_sequence> => or <bool_mark_M> <boolean_term>;
<boolean_expression_sequence> => <boolean_expression_sequence> or <bool_mark_M> <boolean_term>;
<bool_mark_M> =>;
<bool_mark_N> =>;
<else_part> => else <bool_mark_M> <statement>;
<structured_statement> => <repetitive_statement>;
<repetitive_statement> => <while_statement>;
<while_statement> => while <bool_mark_M> <boolean_expression> do <bool_mark_M> <statement>;
<repetitive_statement> => <for_statement>;
<for_statement> => for <control_variable> := <initial_value> to <final_value> do <for_mark_M> <statement>;
<for_statement> => for <control_variable> := <initial_value> downto <final_value> do <for_mark_M> <statement>;
<control_variable> => <entire_variable>;
<entire_variable> => <variable_identifier>;
<initial_value> => <expression>;
<final_value> => <expression>;
<for_mark_M> =>;
<repetitive_statement> => <repeat_statement>;
<repeat_statement> => repeat <bool_mark_M> <statement_sequence> until <repeat_mark_N> <boolean_expression>;
<repeat_mark_N> =>;
<new_type> => <new_pointer_type>;
<new_pointer_type> => ^ <domain_type>;
<domain_type> => <type_identifier>;
<procedure_identifier> => ID;
<function_identifier> => ID;
<variable_access> => <identified_variable>;
<identified_variable> => <pointer_variable> ^;
<pointer_variable> => <variable_access>;
<simple_statement> => <procedure_statement>;
<procedure_statement> => <procedure_identifier> ( <actual_parameter_list> );
<procedure_statement> => <procedure_identifier> ( );
<actual_parameter_list> => <actual_parameter>;
<actual_parameter_list> => <actual_parameter_list> , <actual_parameter>;
<actual_parameter> => <expression>;
<conditional_statement> => <case_statement>;
<case_statement> => case <case_index> of <case_list_element_sequence> end;
<case_list_element_sequence> => <case_list_element> semi;
<case_list_element_sequence> => <case_list_element_sequence> <case_list_element> semi;
<case_index> => <expression>;
<case_list_element> => <case_constant> <case_mark_N> : <statement>;
<case_constant> => <constant>;
<case_mark_N> =>;
<procedure_statement> => <io_procedure_statement>;
<io_procedure_statement> => read ( <read_parameter_list> );
<io_procedure_statement> => write ( <write_parameter_list> );
<read_parameter_list> => <variable_access_sequence>;
<variable_access_sequence> => <variable_access>;
<variable_access_sequence> => <variable_access_sequence> , <variable_access>;
<write_parameter_list> => <write_parameter_sequence>;
<write_parameter_sequence> => <expression>;
<write_parameter_sequence> => <write_parameter_sequence> , <expression>;;